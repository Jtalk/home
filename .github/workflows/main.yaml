name: Home Deploy

on: [push]

env:
  CI: true
  NODE_VERSION: 13.x
  NODE_ENV: production

  UI_DOCKER_IMAGE_PREFIX: jtalk/home-ui
  API_DOCKER_IMAGE_PREFIX: jtalk/home-api
  DBMIGRATE_DOCKER_IMAGE_PREFIX: jtalk/home-dbmigrate
  
jobs:
  build-release-ui:
    name: Build and Release UI
    runs-on: ubuntu-latest
    env:
      REACT_APP_API_LOCATION: /api
    steps:
    - uses: actions/checkout@v1
    - name: Set up Node.JS ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ env.NODE_VERSION }}
    - name: Test UI
      working-directory: home2-ui
      env:
        NODE_ENV: development
      run: |
        npm ci
        npm run test
    - name: Build UI
      working-directory: home2-ui
      run: |
        npm ci
        npm run build
    - name: Build & Push docker
      uses: ./.github/actions/docker-build-push
      with:
        tag-prefix: ${{ env.UI_DOCKER_IMAGE_PREFIX }}
        working-directory: home2-ui
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
  build-release-api:
    name: Build and Release API
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Specify the current hash as a build version
      run: |
        sed -Ei 's/^version := "\w+"$/version := "${{ github.sha }}"/' build.sbt
        echo The new build.sbt with its version updated
        cat build.sbt
      working-directory: home2-rest
    - name: Build & publish the project
      uses: matankdr/github-docker-sbt@3d98d670c583c68bf69e51ac6ed08125d3f55b51
      with:
        command: |
          eval cd home2-rest; sbt test docker:publishLocal
        docker-login-username: ${{ secrets.DOCKER_USERNAME }}
        docker-login-password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Push branch and master tags
      uses: ./.github/actions/docker-build-push
      with:
        tag-prefix: ${{ env.API_DOCKER_IMAGE_PREFIX }}
        working-directory: home2-api
        build: "false"
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
  build-release-migrations:
    name: Build and Release Database Migrations
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Set up Node.JS ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ env.NODE_VERSION }}
    - name: Push branch and master tags
      uses: ./.github/actions/docker-build-push
      with:
        tag-prefix: ${{ env.DBMIGRATE_DOCKER_IMAGE_PREFIX }}
        working-directory: home2-dbmigrate
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
  deploy-migrations: 
    name: Deploy database migrations
    runs-on: ubuntu-latest
    needs: 
      - build-release-ui
      - build-release-api
      - build-release-migrations
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v1
      - name: Load Kubernetes config
        uses: digitalocean/action-doctl@v1.8.0
        env:
          DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DO_TOKEN }}
        with:
          args: kubernetes cluster kubeconfig show ${{ secrets.DO_CLUSTER_NAME }} > $GITHUB_WORKSPACE/.kubeconfig

  deploy-ui:
    name: Deploy UI to Kubernetes
    runs-on: ubuntu-latest
    needs: 
      - build-release-ui
      - deploy-migrations
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v1
      - name: Load Kubernetes config
        uses: digitalocean/action-doctl@v1.8.0
        env:
          DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DO_TOKEN }}
          KUBECONFIG: /home/runner/.kube/config
        with:
          args: kubernetes cluster kubeconfig show ${{ secrets.DO_CLUSTER_NAME }} > $GITHUB_WORKSPACE/.kubeconfig
      - run: |
          echo $KUBECONFIG
          test -d $HOME/.kube || mkdir $HOME/.kube
          cp $GITHUB_WORKSPACE/.kubeconfig $HOME/.kube/config
          head -n 3 $HOME/.kube/config
          
      - name: Kubernetes set context
        uses: Azure/k8s-set-context@v1
        with:
          kubeconfig: ${{ github.workspace }}/.kubeconfig
      - name: Deploy API to Kubernetes
        uses: Azure/k8s-deploy@v1
        with:
          manifests: |
            home2-ui/deploy/staging/deployment.yaml
            home2-ui/deploy/staging/service.yaml
            home2-ui/deploy/staging/ingress.yaml
          images: ${{ env.UI_DOCKER_IMAGE_PREFIX }}:${{ github.sha }}
          
  deploy-api:
    name: Deploy API to Kubernetes
    runs-on: ubuntu-latest
    needs: 
      - build-release-api
      - deploy-migrations
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v1
      - name: Load Kubernetes config
        uses: digitalocean/action-doctl@v1.8.0
        env:
          DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DO_TOKEN }}
        with:
          args: kubernetes cluster kubeconfig show ${{ secrets.DO_CLUSTER_NAME }} > $GITHUB_WORKSPACE/.kubeconfig
      - name: Kubernetes set context
        uses: Azure/k8s-set-context@v1
        with:
          kubeconfig: .kubeconfig
      - name: Deploy API to Kubernetes
        uses: Azure/k8s-deploy@v1
        with:
          manifests: |
            home2-rest/deploy/staging/deployment.yaml
            home2-rest/deploy/staging/service.yaml
            home2-rest/deploy/staging/ingress.yaml
          images: ${{ env.API_DOCKER_IMAGE_PREFIX }}:${{ github.sha }}
          
#       - name: Deploy to Kubernetes
#         working-directory: digito-ui/deploy
#         run: |
#             # Good ol' kubernetes, still unable to figure image tags out on its own in 2019...
#             # Also all this [[][[][]][[][]] is because Sed is kind of a retard when it comes to brackets.
#             sed -i -- 's/[[][[]IMAGE_TAG[]][]]/${{ github.sha }}/' deployment.yml
#             # Fix namespace
#             kubectl config set-context --current --namespace=$KUBE_NS
#             # It's faster to deploy manually than to be figuring out all the Azure k8s-deploy's
#             # idiosyncrasies one by one tbh.
#             kubectl apply -f deployment.yml
#             kubectl apply -f service.yml
#             kubectl apply -f ingress.yml
#             # Waiting for the rollout
#             kubectl rollout status -w --timeout=1m -f deployment.yml
#   verify:
#     name: Verify deployment
#     runs-on: ubuntu-latest
#     needs: deploy
#     steps:
#       - name: Verify the healthcheck URL
#         run: |
#           curl --fail https://digito.jtalk.me/
        














