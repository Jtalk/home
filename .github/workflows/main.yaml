name: Home Deploy

on: [push]

env:
  CI: true
  NODE_VERSION: 13.x
  NODE_ENV: production

  UI_DOCKER_IMAGE_PREFIX: jtalk/home-ui
  API_DOCKER_IMAGE_PREFIX: jtalk/home-api
  DBMIGRATE_DOCKER_IMAGE_PREFIX: jtalk/home-dbmigrate
  
jobs:
  build-release-ui:
    name: Build and Release UI
    runs-on: ubuntu-latest
    env:
      REACT_APP_API_URL: /api
    steps:
    - uses: actions/checkout@v1
    - name: Set up Node.JS ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ env.NODE_VERSION }}
    - name: Test UI
      working-directory: home2-ui
      env:
        NODE_ENV: development
      run: |
        npm ci
        npm run test
    - name: Build UI
      working-directory: home2-ui
      run: |
        npm ci
        npm run build
    - name: Build & Push docker
      uses: ./.github/actions/docker-build-push
      with:
        tag-prefix: ${{ env.UI_DOCKER_IMAGE_PREFIX }}
        working-directory: home2-ui
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
  build-release-api:
    name: Build and Release API
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Specify the current hash as a build version
      run: |
        sed -Ei 's/^version := "\w+"$/version := "${{ github.sha }}"/' build.sbt
        echo The new build.sbt with its version updated
        cat build.sbt
      working-directory: home2-rest
    - name: Build & publish the project
      uses: matankdr/github-docker-sbt@3d98d670c583c68bf69e51ac6ed08125d3f55b51
      with:
        command: |
          eval cd home2-rest; sbt test docker:publishLocal
        docker-login-username: ${{ secrets.DOCKER_USERNAME }}
        docker-login-password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Push branch and master tags
      uses: ./.github/actions/docker-build-push
      with:
        tag-prefix: ${{ env.API_DOCKER_IMAGE_PREFIX }}
        working-directory: home2-api
        build: "false"
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
  build-release-migrations:
    name: Build and Release Database Migrations
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Set up Node.JS ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ env.NODE_VERSION }}
    - name: Push branch and master tags
      uses: ./.github/actions/docker-build-push
      with:
        tag-prefix: ${{ env.DBMIGRATE_DOCKER_IMAGE_PREFIX }}
        working-directory: home2-dbmigrate
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        

############################ STAGING ############################
  deploy-migrations-staging: 
    name: Deploy database migrations to staging
    runs-on: ubuntu-latest
    needs: 
      - build-release-ui
      - build-release-api
      - build-release-migrations
    if: github.ref == 'refs/heads/master'
    env:
      KUBECONFIG: ${{ github.workspace }}/.kubeconfig
    steps:
      - uses: actions/checkout@v1
      - name: Load Kubernetes config
        uses: digitalocean/action-doctl@v1.8.0
        env:
          DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DO_TOKEN }}
        with:
          args: kubernetes cluster kubeconfig show ${{ secrets.DO_CLUSTER_NAME }} > $GITHUB_WORKSPACE/.kubeconfig
      - name: Deploy the migration job
        run: kubectl delete -f home2-dbmigrate/deploy/staging/up.job.yaml
      - name: Deploy Database to Kubernetes
        uses: Azure/k8s-deploy@v1
        with:
          namespace: home-staging
          manifests: |
            home2-dbmigrate/deploy/staging/up.job.yaml
          images: ${{ env.DBMIGRATE_DOCKER_IMAGE_PREFIX }}:${{ github.sha }}
      - name: Verify database deployment
        env:
          WAIT_TIMEOUT: 60s
        working-directory: home2-dbmigrate/deploy/staging
        run: |
          kubectl wait --for=condition=complete --timeout=$WAIT_TIMEOUT -f up.job.yaml &
          success_pid=$!
          kubectl wait --for=condition=failed --timeout=$WAIT_TIMEOUT -f up.job.yaml && exit 1 &
          fail_pid=$!
          wait -n $success_pid $fail_pid

  deploy-ui-staging:
    name: Deploy UI to Kubernetes staging
    runs-on: ubuntu-latest
    needs: 
      - build-release-ui
      - deploy-migrations-staging
    if: github.ref == 'refs/heads/master'
    env:
      KUBECONFIG: ${{ github.workspace }}/.kubeconfig
    steps:
      - uses: actions/checkout@v1
      - name: Load Kubernetes config
        uses: digitalocean/action-doctl@v1.8.0
        env:
          DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DO_TOKEN }}
        with:
          args: kubernetes cluster kubeconfig show ${{ secrets.DO_CLUSTER_NAME }} > $GITHUB_WORKSPACE/.kubeconfig
      - run: |
          echo $KUBECONFIG
      - name: Deploy API to Kubernetes
        uses: Azure/k8s-deploy@v1
        with:
          namespace: home-staging
          manifests: |
            home2-ui/deploy/deployment.yaml
            home2-ui/deploy/staging/service.yaml
            home2-ui/deploy/ingress.yaml
          images: ${{ env.UI_DOCKER_IMAGE_PREFIX }}:${{ github.sha }}
          
  deploy-api-staging:
    name: Deploy API to Kubernetes staging
    runs-on: ubuntu-latest
    needs: 
      - build-release-api
      - deploy-migrations-staging
    if: github.ref == 'refs/heads/master'
    env:
      KUBECONFIG: ${{ github.workspace }}/.kubeconfig
    steps:
      - uses: actions/checkout@v1
      - name: Load Kubernetes config
        uses: digitalocean/action-doctl@v1.8.0
        env:
          DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DO_TOKEN }}
        with:
          args: kubernetes cluster kubeconfig show ${{ secrets.DO_CLUSTER_NAME }} > $GITHUB_WORKSPACE/.kubeconfig
      - name: Deploy API to Kubernetes
        uses: Azure/k8s-deploy@v1
        with:
          namespace: home-staging
          manifests: |
            home2-rest/deploy/deployment.yaml
            home2-rest/deploy/staging/service.yaml
            home2-rest/deploy/ingress.yaml
          images: ${{ env.API_DOCKER_IMAGE_PREFIX }}:${{ github.sha }}
          

############################ Staging Test ############################
  verify-staging: 
    name: Verify deployment is working on staging
    runs-on: ubuntu-latest
    needs: 
      - deploy-ui-staging
      - deploy-api-staging
    steps:
      - run: |
        echo Doing nothing for now


############################ LIVE ############################
  deploy-migrations-live: 
    name: Deploy database migrations to live
    runs-on: ubuntu-latest
    needs: 
      - build-release-migrations
      - verify-staging
    if: github.ref == 'refs/heads/master'
    env:
      KUBECONFIG: ${{ github.workspace }}/.kubeconfig
    steps:
      - uses: actions/checkout@v1
      - name: Load Kubernetes config
        uses: digitalocean/action-doctl@v1.8.0
        env:
          DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DO_TOKEN }}
        with:
          args: kubernetes cluster kubeconfig show ${{ secrets.DO_CLUSTER_NAME }} > $GITHUB_WORKSPACE/.kubeconfig
      - name: Deploy the migration job
        run: kubectl delete -f home2-dbmigrate/deploy/live/up.job.yaml
      - name: Deploy Database to Kubernetes
        uses: Azure/k8s-deploy@v1
        with:
          namespace: home
          manifests: |
            home2-dbmigrate/deploy/live/up.job.yaml
          images: ${{ env.DBMIGRATE_DOCKER_IMAGE_PREFIX }}:${{ github.sha }}
      - name: Verify database deployment
        env:
          WAIT_TIMEOUT: 60s
        working-directory: home2-dbmigrate/deploy/live
        run: |
          kubectl wait --for=condition=complete --timeout=$WAIT_TIMEOUT -f up.job.yaml &
          success_pid=$!
          kubectl wait --for=condition=failed --timeout=$WAIT_TIMEOUT -f up.job.yaml && exit 1 &
          fail_pid=$!
          wait -n $success_pid $fail_pid

  deploy-ui-live:
    name: Deploy UI to Kubernetes live
    runs-on: ubuntu-latest
    needs: 
      - build-release-ui
      - deploy-migrations-live
      - verify-staging
    if: github.ref == 'refs/heads/master'
    env:
      KUBECONFIG: ${{ github.workspace }}/.kubeconfig
    steps:
      - uses: actions/checkout@v1
      - name: Load Kubernetes config
        uses: digitalocean/action-doctl@v1.8.0
        env:
          DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DO_TOKEN }}
        with:
          args: kubernetes cluster kubeconfig show ${{ secrets.DO_CLUSTER_NAME }} > $GITHUB_WORKSPACE/.kubeconfig
      - run: |
          echo $KUBECONFIG
      - name: Deploy API to Kubernetes
        uses: Azure/k8s-deploy@v1
        with:
          namespace: home
          manifests: |
            home2-ui/deploy/deployment.yaml
            home2-ui/deploy/live/service.yaml
            home2-ui/deploy/ingress.yaml
          images: ${{ env.UI_DOCKER_IMAGE_PREFIX }}:${{ github.sha }}
          
  deploy-api-live:
    name: Deploy API to Kubernetes live
    runs-on: ubuntu-latest
    needs: 
      - build-release-api
      - deploy-migrations-live
      - verify-staging
    if: github.ref == 'refs/heads/master'
    env:
      KUBECONFIG: ${{ github.workspace }}/.kubeconfig
    steps:
      - uses: actions/checkout@v1
      - name: Load Kubernetes config
        uses: digitalocean/action-doctl@v1.8.0
        env:
          DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DO_TOKEN }}
        with:
          args: kubernetes cluster kubeconfig show ${{ secrets.DO_CLUSTER_NAME }} > $GITHUB_WORKSPACE/.kubeconfig
      - name: Deploy API to Kubernetes
        uses: Azure/k8s-deploy@v1
        with:
          namespace: home
          manifests: |
            home2-rest/deploy/deployment.yaml
            home2-rest/deploy/live/service.yaml
            home2-rest/deploy/ingress.yaml
          images: ${{ env.API_DOCKER_IMAGE_PREFIX }}:${{ github.sha }}
          

############################ LIVE Test ############################
  verify-live: 
    name: Verify deployment is working on LIVE
    runs-on: ubuntu-latest
    needs: 
      - deploy-ui-live
      - deploy-api-live
    steps:
      - run: |
        echo Doing nothing for now

