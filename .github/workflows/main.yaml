name: Home Deploy

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  CI: true
  NODE_VERSION: 16.x
  NODE_ENV: production

  UI_IMAGE_ARTEFACT_NAME: "ui-docker-image"

  INFRA_APP_LIVE: jtalkme
  INFRA_APP_STAGING: jtalkme_staging
  INFRA_REPOSITORY: Jtalk/jtalk.me-infrastructure
  INFRA_DEPLOY_WORKFLOW: Trigger version update for a service

  UI_DOCKER_IMAGE_PREFIX: jtalk/home-ui
  API_DOCKER_IMAGE_PREFIX: jtalk/home-api
  DBMIGRATE_DOCKER_IMAGE_PREFIX: jtalk/home-dbmigrate
  DBBACKUP_DOCKER_IMAGE_PREFIX: jtalk/home-dbbackup

jobs:
  build-release-ui:
    name: Build and Release UI
    runs-on: ubuntu-latest
    env:
      REACT_APP_VERSION: ${{ github.sha }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Node.JS ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Test UI
        working-directory: home2-ui
        env:
          NODE_ENV: development
        run: |
          npm ci
          npm run test
      - name: Build UI
        working-directory: home2-ui
        run: |
          npm run build
          npm prune --production
      - name: Build and push Docker images
        uses: docker/build-push-action@v1.0.1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          path: home2-ui
          repository: ${{ env.UI_DOCKER_IMAGE_PREFIX }}
          tags: ${{ github.sha }}
          tag_with_ref: true
          tag_with_sha: false
          push: ${{ github.ref == 'refs/heads/master' }}
          build_args: |
            REACT_APP_VERSION=${{ env.REACT_APP_VERSION }}
      - name: Save image for testing
        id: export-docker
        run: |
          docker save "${{ env.UI_DOCKER_IMAGE_PREFIX }}:${{ github.sha }}" -o "${{ env.UI_IMAGE_ARTEFACT_NAME }}"
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ env.UI_IMAGE_ARTEFACT_NAME }}
          path: ${{ env.UI_IMAGE_ARTEFACT_NAME }}
          if-no-files-found: error

  cypress-test-ui:
    name: Run Cypress tests on the Docker image
    runs-on: ubuntu-latest
    needs:
      - build-release-ui
    env:
      NODE_ENV: development
    steps:
      - uses: actions/checkout@v2
      - name: Set up Node.JS ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}
      - uses: actions/download-artifact@v2
        with:
          name: ${{ env.UI_IMAGE_ARTEFACT_NAME }}
      - name: Load the pre-build UI docker image
        run: |
          docker load --input "${{ env.UI_IMAGE_ARTEFACT_NAME }}"
      - uses: cypress-io/github-action@v2
        with:
          browser: firefox
          headless: true
          working-directory: home2-ui
          start: docker run -d --rm --name home-ui-ci -p 8070:80 -e REACT_APP_BUGSNAG_API_KEY= ${{ env.UI_DOCKER_IMAGE_PREFIX }}:${{ github.sha }} npm run start:cypress
          wait-on: http://localhost:8070/
          wait-on-timeout: 10
          record: true
        env:
          CYPRESS_CI: true
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_DASHBOARD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Cypress Test Cleanup
        if: always()
        working-directory: home2-ui
        run: |
          docker logs home-ui-ci
          docker stop home-ui-ci

  build-release-api:
    name: Build and Release API
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Specify the current hash as a build version
        run: |
          sed -Ei 's/^version := "\w+"$/version := "${{ github.sha }}"/' build.sbt
          echo The new build.sbt with its version updated
          cat build.sbt
        working-directory: home2-rest
      - name: Choose whether to deploy to docker hub or build locally
        id: publish_cmd
        run: |
          if [[ "${{ github.ref }}" == 'refs/heads/master' ]]; then
            echo "::set-output name=action::docker:publish"
          else
            echo "::set-output name=action::docker:publishLocal"
          fi
      - name: Build & publish the project
        uses: matankdr/github-docker-sbt@a8b6a773bcab2df439fe4150ff155196629d1d4f
        with:
          command: |
            sbt test ${{ steps.publish_cmd.outputs.action }}
          working-directory: home2-rest
          docker-registry: docker.io
          docker-login-username: ${{ secrets.DOCKER_USERNAME }}
          docker-login-password: ${{ secrets.DOCKER_PASSWORD }}
    # Waiting for https://github.com/docker/build-push-action/issues/17 to push multiple tags properly

  build-release-backup:
    name: Build and Release Database Backup Script
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build and push Docker images
        uses: docker/build-push-action@v1.0.1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          path: home2-dbbackup
          repository: ${{ env.DBBACKUP_DOCKER_IMAGE_PREFIX }}
          tags: ${{ github.sha }}
          tag_with_ref: true
          tag_with_sha: false
          push: ${{ github.ref == 'refs/heads/master' }}

  build-release-migrations:
    name: Build and Release Database Migrations
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build and push Docker images
        uses: docker/build-push-action@v1.0.1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          path: home2-dbmigrate
          repository: ${{ env.DBMIGRATE_DOCKER_IMAGE_PREFIX }}
          tags: ${{ github.sha }}
          tag_with_ref: true
          tag_with_sha: false
          push: ${{ github.ref == 'refs/heads/master' }}

  ############################## HELM #############################
  build-release-helm:
    name: Build and release the app's Helm chart
    runs-on: ubuntu-latest
    needs:
      - build-release-ui
      - build-release-api
      - build-release-migrations
      - build-release-backup
      - cypress-test-ui
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v2
      - uses: azure/setup-helm@v1
      - name: Publish Helm chart
        uses: stefanprodan/helm-gh-pages@v1.4.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          charts_dir: deploy
          target_dir: helm
          app_version: ${{ github.sha }}
          chart_version: 1.0.0-${{ github.sha }}

  ############################ STAGING ############################
  deploy-staging:
    name: Deploy the app to staging
    runs-on: ubuntu-latest
    needs:
      - build-release-helm
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Trigger staging pipeline in the terraform repo
        uses: aurelien-baudet/workflow-dispatch@v2
        with:
          workflow: ${{ env.INFRA_DEPLOY_WORKFLOW }}
          repo: ${{ env.INFRA_REPOSITORY }}
          token: ${{ secrets.GH_PUSH_TOKEN }}
          inputs: '{ "name": "${{ env.INFRA_APP_STAGING }}", "version": "${{ github.sha }}" }'
          ref: master
          wait-for-completion: true
          wait-for-completion-timeout: 10m
          wait-for-completion-interval: 30s

  verify-staging:
    name: Verify on staging
    runs-on: ubuntu-latest
    needs:
      - deploy-staging
    steps:
      - name: Check staging is up
        uses: Jtalk/url-health-check-action@v1
        with:
          url: https://staging.jtalk.me/api/owner|https://staging.jtalk.me/api/blog/articles|https://staging.jtalk.me/api/projects|https://staging.jtalk.me
          follow-redirect: true
          max-attempts: 5
          retry-delay: 5s

  ############################ LIVE ############################
  deploy-live:
    name: Deploy the app to live
    runs-on: ubuntu-latest
    needs:
      - build-release-helm
      - deploy-staging
      - verify-staging
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Trigger staging pipeline in the terraform repo
        uses: aurelien-baudet/workflow-dispatch@v2
        with:
          workflow: ${{ env.INFRA_DEPLOY_WORKFLOW }}
          repo: ${{ env.INFRA_REPOSITORY }}
          token: ${{ secrets.GH_PUSH_TOKEN }}
          inputs: '{ "name": "${{ env.INFRA_APP_LIVE }}", "version": "${{ github.sha }}" }'
          ref: master
          wait-for-completion: true
          wait-for-completion-timeout: 10m
          wait-for-completion-interval: 30s

  verify-live:
    name: Verify on LIVE
    runs-on: ubuntu-latest
    needs:
      - deploy-live
    steps:
      - name: Check LIVE is up
        uses: Jtalk/url-health-check-action@v1
        with:
          url: https://jtalk.me/api/owner|https://jtalk.me/api/blog/articles|https://jtalk.me/api/projects|https://jtalk.me
          follow-redirect: true
          max-attempts: 5
          retry-delay: 5s
